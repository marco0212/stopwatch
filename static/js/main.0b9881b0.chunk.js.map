{"version":3,"sources":["component/Monitor/Monitor.js","component/ControlArea/ToggleStartButton/ToggleStartButton.js","component/ControlArea/UtilButton/UtilButton.js","component/ControlArea/ControlArea.js","component/RecordTable/RecordTable.js","App.js","function.js","index.js"],"names":["Monitor","props","className","getTimeEle","time","ToggleStartButton","buttonText","color","isLive","onClick","toggleStart","UtilButton","utilFunction","ControlArea","appStatus","RecordTable","liveTimeRecordEle","record","length","map","data","i","key","index","sec","App","state","milisec","history","Array","fill","this","copyHistory","slice","unshift","setState","clearInterval","timer","setInterval","tick","second","Math","floor","minute","hour","toString","convertToTime","split","x","Number","isNaN","bind","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b9881b0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Monitor(props) {\n  return (\n    <div className=\"monitor\">\n      <time>{props.getTimeEle(props.time)}</time>\n    </div>\n  );\n}\n\nexport default Monitor;\n","import React from \"react\";\nexport default function ToggleStartButton(props) {\n  let buttonText = \"\",\n    color = \"\";\n  if (props.isLive) {\n    buttonText = \"중단\";\n    color = \"red\";\n  } else {\n    buttonText = \"시작\";\n    color = \"green\";\n  }\n  return (\n    <button className={color} onClick={props.toggleStart}>\n      {buttonText}\n    </button>\n  );\n}\n","import React from \"react\";\nexport default function UtilButton(props) {\n  let buttonText = \"\",\n    className = \"\";\n  if (props.time) {\n    if (props.isLive) {\n      buttonText = \"랩\";\n    } else {\n      buttonText = \"재설정\";\n    }\n  } else {\n    buttonText = \"랩\";\n    className = \"disable\";\n  }\n  return (\n    <button className={className} onClick={props.utilFunction}>\n      {buttonText}\n    </button>\n  );\n}\n","import React from \"react\";\nimport ToggleStartButton from \"./ToggleStartButton/ToggleStartButton\";\nimport UtilButton from \"./UtilButton/UtilButton\";\n\nexport default function ControlArea(props) {\n  return (\n    <div className=\"control-area\">\n      <UtilButton\n        utilFunction={props.utilFunction}\n        time={props.time}\n        isLive={props.appStatus}\n      />\n      <ToggleStartButton\n        toggleStart={props.toggleStart}\n        isLive={props.appStatus}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function RecordTable(props) {\n  const liveTimeRecordEle = (\n    <li>\n      <strong>랩 {props.record.length - 5}</strong>\n      <time>{props.getTimeEle(props.time)}</time>\n    </li>\n  );\n  return (\n    <div className=\"table-area\">\n      <ul>\n        {!!props.time && liveTimeRecordEle}\n        {props.record.map((data, i) => {\n          if (!data) return <li key={i}></li>;\n          const key = `랩 ${data.index}`;\n          return (\n            <li key={key}>\n              <strong>{key}</strong>\n              <time>{props.getTimeEle(data.sec)}</time>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport TimeMonitor from \"./component/Monitor/Monitor\";\nimport ControlArea from \"./component/ControlArea/ControlArea\";\nimport RecordTable from \"./component/RecordTable/RecordTable\";\nimport { convertToTime } from \"./function\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      milisec: 0,\n      isLive: false,\n      history: Array(6).fill(null)\n    };\n  }\n  utilFunction() {\n    const isLive = this.state.isLive;\n    let index = this.state.history.length - 5;\n    if (isLive) {\n      const copyHistory = this.state.history.slice();\n      copyHistory.unshift({ sec: this.state.milisec, index });\n      this.setState({ history: copyHistory });\n    } else {\n      this.setState({ milisec: 0, history: Array(6).fill(null) });\n    }\n  }\n  toggleStart() {\n    const isLive = this.state.isLive;\n    if (isLive) {\n      clearInterval(this.timer);\n    } else {\n      this.timer = setInterval(() => {\n        this.tick();\n      }, 10);\n    }\n    this.setState({ isLive: !isLive });\n  }\n  getTimeEle(time) {\n    const arr = convertToTime(time).split(\"\");\n    return arr.map((x, i) => {\n      if (!Number.isNaN(Number(x))) return <span key={i}>{x}</span>;\n      return x;\n    });\n  }\n  tick() {\n    this.setState({ milisec: this.state.milisec + 1 });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <TimeMonitor time={this.state.milisec} getTimeEle={this.getTimeEle} />\n        <ControlArea\n          toggleStart={this.toggleStart.bind(this)}\n          utilFunction={this.utilFunction.bind(this)}\n          appStatus={this.state.isLive}\n          time={this.state.milisec}\n        />\n        <RecordTable\n          record={this.state.history}\n          getTimeEle={this.getTimeEle}\n          time={this.state.milisec}\n          appStatus={this.state.isLive}\n        />\n      </div>\n    );\n  }\n}\n","function convertToTime(time) {\n  const limit = 60;\n  let milisec = time % 100,\n    second = Math.floor((time / 100) % limit),\n    minute = Math.floor((time / 100 / limit) % limit),\n    hour = Math.floor(time / 100 / limit / limit);\n\n  if (second < 10) second = \"0\" + second.toString();\n  if (minute < 10) minute = \"0\" + minute.toString();\n  if (milisec < 10) milisec = \"0\" + milisec.toString();\n\n  if (!hour) return `${minute}:${second}.${milisec}`;\n  return `${hour}:${minute}:${second}.${milisec}`;\n}\n\nexport { convertToTime };\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\n\nReactDom.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}